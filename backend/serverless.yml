service:
  name: serverless-twitter

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  environment:
    USERS_TABLE: Sls-Twitter-Tweets-${self:provider.stage}
    TWEETS_TABLE: Sls-Twitter-Tweets-${self:provider.stage}
    TIME_INDEX: CreatedAtIndex
    IMAGES_S3_BUCKET: todos-images-alew-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300  
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'
    - Effect: 'Allow'
      Action:
        - 'xray:PutTraceSegments'
        - 'xray:PutTelemetryRecords'
      Resource:
         - '*'

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  documentation:
    api:
      info:
        version: v0.0.1
        title: Serverless Twitter API
        description: Serverless application based on Twitter
    models:

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  Register:
    handler: src/lambda/http/registerUser.handler
    events:
      - http:
          method: post
          path: users/register
          cors: true
          authorizer: Auth
          documentation:
            summary: Creates a new user
            description: Creates a new user
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}

resources:
  Resources:
    UsersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USERS_TABLE}

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
          
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
